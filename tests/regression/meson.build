test_runner_script = meson.project_source_root() / 'scripts' / 'regression_test_runner.py'

regression_test_exe = find_program('uv', required: false, version: '>=0.5.17')
if regression_test_exe.found()
    regression_test_args = ['run', test_runner_script]
else
    regression_test_exe = find_program(test_runner_script)
    regression_test_args = []
endif

regression_tests = [
    'adapter_trimming' / 'excl_adapter' / 'pe' / 'non_overlapping',
    'adapter_trimming' / 'excl_adapter' / 'pe' / 'overlapping',
    'adapter_trimming' / 'excl_adapter' / 'se',
    'adapter_trimming' / 'incl_adapter' / 'pe',
    'adapter_trimming' / 'incl_adapter' / 'se',
    'adapter_trimming' / 'only_adapter' / 'pe',
    'adapter_trimming' / 'only_adapter' / 'se',
    'bugfixes',
    'demultiplexing' / 'common' / 'basenames',
    'demultiplexing' / 'common' / 'demux_only',
    'demultiplexing' / 'common' / 'interleaved',
    'demultiplexing' / 'common' / 'merge',
    'demultiplexing' / 'double_indexed' / 'pe',
    'demultiplexing' / 'double_indexed' / 'se',
    'demultiplexing' / 'single_indexed' / 'pe',
    'demultiplexing' / 'single_indexed' / 'se',
    'filtering' / 'maxlength' / 'pe' / 'both',
    'filtering' / 'maxlength' / 'pe' / 'mate1',
    'filtering' / 'maxlength' / 'pe' / 'mate2',
    'filtering' / 'maxlength' / 'se',
    'filtering' / 'minlength' / 'pe' / 'both',
    'filtering' / 'minlength' / 'pe' / 'mate1',
    'filtering' / 'minlength' / 'pe' / 'mate2',
    'filtering' / 'minlength' / 'se',
    'merging' / 'additive',
    'misc' / 'adapter_list' / '1',
    'misc' / 'adapter_list' / '2',
    'misc' / 'bad_args',
    'misc' / 'basename' / 'alt' / 'pe',
    'misc' / 'basename' / 'alt' / 'se',
    'misc' / 'convert_bases' / 'pe',
    'misc' / 'convert_bases' / 'se',
    'misc' / 'crlf_newlines',
    'misc' / 'empty_input' / 'pe',
    'misc' / 'empty_input' / 'se',
    'misc' / 'gzip_by_extension',
    'misc' / 'head',
    'misc' / 'identify_adapters',
    'misc' / 'interleaved' / 'no_output2',
    'misc' / 'interleaved' / 'pe',
    'misc' / 'interleaved' / 'se',
    'misc' / 'mate_separator' / 'merged',
    'misc' / 'mate_separator' / 'no_merge',
    'misc' / 'merging',
    'misc' / 'multiple_input' / 'pe',
    'misc' / 'multiple_input' / 'se',
    'misc' / 'no_arguments',
    'misc' / 'no_filtering' / 'demux',
    'misc' / 'no_filtering' / 'simple',
    'misc' / 'out_options' / 'pe',
    'misc' / 'out_options' / 'se',
    'misc' / 'post_processing',
    'misc' / 'prefix_names' / 'pe_demux',
    'misc' / 'prefix_names' / 'pe_trim_demux',
    'misc' / 'prefix_names' / 'pe_trim',
    'misc' / 'prefix_names' / 'se_demux',
    'misc' / 'prefix_names' / 'se_trim_demux',
    'misc' / 'prefix_names' / 'se_trim',
    'misc' / 'preserve5p' / 'pe' / 'collapsed',
    'misc' / 'preserve5p' / 'pe' / 'disabled',
    'misc' / 'preserve5p' / 'pe' / 'enabled',
    'misc' / 'preserve5p' / 'se' / 'disabled',
    'misc' / 'preserve5p' / 'se' / 'enabled',
    'misc' / 'qualityformat' / 'phred33',
    'misc' / 'qualityformat' / 'phred64',
    'misc' / 'qualityformat' / 'sam',
    'misc' / 'qualityformat' / 'solexa',
    'misc' / 'uneven_input_1',
    'misc' / 'uneven_input_2',
    'quality_trimming' / 'perbase' / 'pe',
    'quality_trimming' / 'perbase' / 'se',
    'quality_trimming' / 'trimfixed' / 'pe' / '3p_both_set',
    'quality_trimming' / 'trimfixed' / 'pe' / '3p',
    'quality_trimming' / 'trimfixed' / 'pe' / '5p_and_3p_both_set',
    'quality_trimming' / 'trimfixed' / 'pe' / '5p_and_3p',
    'quality_trimming' / 'trimfixed' / 'pe' / '5p_both_set',
    'quality_trimming' / 'trimfixed' / 'pe' / '5p',
    'quality_trimming' / 'trimfixed' / 'pe' / 'collapse_5p_and_3p',
    'quality_trimming' / 'trimfixed' / 'pe' / 'collapse_5p_both_set',
    'quality_trimming' / 'trimfixed' / 'pe' / 'collapse_5p',
    'quality_trimming' / 'trimfixed' / 'se' / '3p',
    'quality_trimming' / 'trimfixed' / 'se' / '5p_and_3p',
    'quality_trimming' / 'trimfixed' / 'se' / '5p',
    'quality_trimming' / 'trimwindows' / 'pe' / 'excl_n',
    'quality_trimming' / 'trimwindows' / 'pe' / 'incl_n',
    'quality_trimming' / 'trimwindows' / 'se' / 'excl_n',
    'quality_trimming' / 'trimwindows' / 'se' / 'incl_n',
]

foreach test : regression_tests
    test(
        test.replace('/', ' / '),
        regression_test_exe,
        args: regression_test_args
        + [
            meson.current_build_dir(),
            meson.current_source_dir() / test,
            '--threads', '1',
            '--use-colors', 'always',
            '--json-schema', meson.project_source_root() / 'schema.json',
            '--executable', exe.full_path(),
            '--source-root', meson.project_source_root(),
        ],
        depends: [exe],
        suite: ['regression'],
    )
endforeach

custom_target(
    'update-regression',
    command: [regression_test_exe]
    + regression_test_args
    + [
        meson.current_build_dir(),
        meson.current_source_dir(),
        '--create-updated-reference',
        '--use-colors', 'always',
        '--schema-validation-required',
        '--json-schema', meson.project_source_root() / 'schema.json',
        '--executable', exe.full_path(),
        '--source-root', meson.project_source_root(),
    ],
    output: 'update-regression',
    console: true,
    depends: [exe],
)