name: build

on:
  pull_request:
  push:
    branches: [master]

permissions:
  contents: read

jobs:
  build-and-test:
    name: test on ${{ matrix.os }} with ${{ matrix.cxx }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cxx: g++
            coverage: "true"
          - os: ubuntu-latest
            cxx: clang++
            coverage: "false"
          - os: macos-latest
            cxx: clang++
            coverage: "false"
      # Do not auto-cancel other runners if one fails
      fail-fast: false

    env:
      CXX: ${{ matrix.cxx }}
      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      UV_SYSTEM_PYTHON: 1

    steps:
      - name: Disable man-db building
        if: ${{ matrix.os == 'ubuntu-latest' }}
        # This speeds up apt-get, by preventing the man-db step from running
        run: sudo rm -vf /var/lib/man-db/auto-update

      - name: Audit all outbound calls
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.x"
      - uses: astral-sh/setup-uv@f94ec6bedd8674c4426838e6b50417d36b6ab231 # v5.3.1
        with:
          version: "latest"

      # Use mold for faster linking
      - uses: rui314/setup-mold@45c2b085bbc0283c8e1443d4a511aaa1eda5a3a1 # v1
        with:
            mold-version: 2.38.0
            make-default: true

      - name: ccache
        uses: hendrikmuhs/ccache-action@a1209f81afb8c005c13b4296c32e363431bffea5 # v1.2.17
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.cxx }}
          create-symlink: true
          # Disable cache cleanups while building
          max-size: "0"

      - name: dependencies (libraries)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install -y libisal-dev libdeflate-dev

      - name: dependencies (libraries)
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install isa-l libdeflate

      - name: dependencies (pip)
        run: uv pip install meson ninja jsonschema sphinx

      - name: setup
        run: make setup DEBUG=true SANITIZE=true COVERAGE=${{ matrix.coverage }}

      - name: compile
        run: make executables DEBUG=true SANITIZE=true COVERAGE=${{ matrix.coverage }}

      - name: install
        run: make install DESTDIR=${PWD}/install

      - name: examples
        run: make -C examples EXE=${PWD}/build/src/adapterremoval3

      - name: regression tests
        run: make regression-tests

      # Unit tests are run last to enable cleanup of coverage data from other
      # actions before running coveralls
      - name: unit tests
        run: |
          find . -name '*.gcda' -print -delete
          make unit-tests

      - name: coveralls
        if: ${{ matrix.coverage == 'true' && github.event_name == 'push' }}
        run: |
          sudo apt-get install -y gcovr
          uv pip install cpp-coveralls
          coveralls \
            --exclude build/src/reports_template_html.cpp \
            --exclude build/src/reports_template_html.hpp \
            --exclude src/robin_hood.hpp \
            --exclude tests/unit/catch.hpp \
            --build-root build \
            --root . \
            --gcov-options '\-lpbc'

      - name: CCache cleanup
      # Manual ccache cleanup, using the ccache-action default max size
        run: env CCACHE_MAXSIZE=500M ccache --cleanup
