/*************************************************************************\
 * AdapterRemoval - cleaning next-generation sequencing reads            *
 *                                                                       *
 * Copyright (C) 2011 by Stinus Lindgreen - stinus@binf.ku.dk            *
 * Copyright (C) 2014 by Mikkel Schubert - mikkelsch@gmail.com           *
 *                                                                       *
 * If you use the program, please cite the paper:                        *
 * Schubert et al. (2016). AdapterRemoval v2: rapid adapter trimming,    *
 * identification, and read merging. BMC Research Notes, 12;9(1):88      *
 * https://doi.org/10.1186/s13104-016-1900-2                             *
 *                                                                       *
 * This program is free software: you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation, either version 3 of the License, or     *
 * (at your option) any later version.                                   *
 *                                                                       *
 * This program is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 * GNU General Public License for more details.                          *
 *                                                                       *
 * You should have received a copy of the GNU General Public License     *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. *
\*************************************************************************/
#pragma once

#include <string>
#include <vector>

namespace adapterremoval {

class fastq;

typedef std::vector<std::string> string_vec;
typedef string_vec::const_iterator string_vec_citer;
typedef std::pair<std::string, std::string> string_pair;
typedef std::vector<string_pair> string_pair_vec;

typedef std::vector<fastq> fastq_vec;

/** Different file-types read / generated by AdapterRemoval. */
enum class read_type : size_t
{
  /** Mate 1 reads, either read or written by AR. */
  mate_1 = 0,
  /** Mate 2 reads, either read or written by AR. */
  mate_2,
  /** Overlapping PE reads merged into a single sequence. */
  merged,
  /** PE reads for which the mate has been discarded. */
  singleton,
  /** Discarded reads; e.g. too short reads. */
  discarded,
  //! End value; not to be used as an argument.
  max,

  //! The following types are normally not handled along with the above

  //! Demultiplexed mate 1 reads that could not be assigned to a sample
  unidentified_1,
  //! Demultiplexed mate 2 reads that could not be assigned to a sample
  unidentified_2,
};

} // namespace adapterremoval
